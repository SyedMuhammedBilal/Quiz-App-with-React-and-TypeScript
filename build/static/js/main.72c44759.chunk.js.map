{"version":3,"sources":["components/QuestionCard.styles.ts","components/QuestionCard.tsx","App.styles.ts","API.ts","utils.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNum","totalQuestions","dangerouslySetInnerHTML","__html","map","answer","disabled","value","onClick","Difficulty","GlobalStyles","createGlobalStyle","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startQuiz","EASY","newQuestions","nextQuestion","length","className","undefined","e","currentTarget","prev","answerObject","correctAnswer","TOTAL_QUESTION","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.72c44759.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  margin-top: 10%;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n      correct\n        ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n        : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;","import React from 'react'\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: any;\n  userAnswer: any;\n  questionNum: number;\n  totalQuestions: number;\n};\n\nexport const QuestionCard: React.FC<Props> = ({\n    question, answers,\n    callback, userAnswer,\n    questionNum, totalQuestions }) => {\n  return (\n    <div>\n    <Wrapper>\n      <div>\n        <p>\n          Question: {questionNum} / {totalQuestions}\n        </p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n          {answers.map(answer => (\n            <ButtonWrapper\n              correct={ userAnswer?.answer === answer }\n              userClicked = { userAnswer?.answer === answer }\n            >\n              <button disabled={userAnswer} value={answer} onClick={callback}>\n                <span dangerouslySetInnerHTML={{ __html: answer }} />\n              </button>\n            </ButtonWrapper>\n          ))}\n        </div>\n      </div>\n    </Wrapper>\n    </div>\n  )\n}\n\n","// @ts-ignore\nimport styled, { createGlobalStyle } from 'styled-components';\nimport Cover from './background.jpg';\n\nexport const GlobalStyles = createGlobalStyle`\n  html{\n    height: 100%;\n  }\n\n  body{\n    background-image: linear-gradient(to right top, #051937, #004d7a, #008793, #00bf72, #a8eb12);\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n\n  *{\n    box-sizing: border-box;\n  }\n`\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p{\n    color: #fff;\n  }\n  .score{\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  .btn{\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    font-size: 1rem;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .next{\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    font-size: 1rem;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start{\n    max-width: 200px;\n  }\n`","import { shuffleArray } from './utils';\n\nexport const fetchQuestions = async (amount: number, difficulty: Difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => (\n    {\n      ...question,\n      answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n    }\n  ))\n};\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\"\n};\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5)","import React, {useState, Fragment} from 'react';\nimport './App.css';\nimport { QuestionCard } from './components/QuestionCard';\nimport { GlobalStyles, Wrapper } from './App.styles';\nimport { fetchQuestions, Difficulty, QuestionState, Question } from './API';\n\nconst TOTAL_QUESTION = 10;\n\ntype AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startQuiz = async () => {\n    setLoading(true);\n    setGameOver(false);\n    const newQuestions = await fetchQuestions(TOTAL_QUESTION, Difficulty.EASY)\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n  const nextQuestion = async () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTION) {\n      setGameOver(true);\n    }\n    else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n\n      if (correct) setScore(prev => prev + 1)\n\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers(prev => [...prev, answerObject])\n    }\n  };\n  \n  return (\n    <Fragment>\n      <GlobalStyles/>\n      <div>\n        <Wrapper>\n        <h1>Quiz App</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTION ? (\n          <button className=\"btn\" onClick={startQuiz}>\n            start\n          </button>) : null}\n        \n        {!gameOver ? (\n          <p className=\"score\">\n            Score: {score}\n          </p>) : null}\n        \n        {loading ? (\n          <p>\n            Loading\n          </p>) : null}\n        \n        {!loading && !gameOver ? (\n          <QuestionCard\n          questionNum={number + 1}\n          totalQuestions={TOTAL_QUESTION}\n          question={questions[number].question}\n          answers={questions[number].answers}\n          userAnswer={userAnswers ? userAnswers[number] : undefined}\n          callback={checkAnswer}\n          />) : null}\n        \n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTION - 1 ? (   \n          <button className=\"next\" onClick={nextQuestion}>\n            Next\n          </button>) : null }\n        </Wrapper>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}